<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 700 470" width="1050" height="705" version="1.1">
  <style>
    foreignObject.text pre,
    foreignObject.text pre code {
      margin: 0;
      padding: 0;
      height: auto;
      width: auto;
      max-height: none;
      max-width: none;
      position: static;
      background: none;
      box-shadow: none;
      white-space: pre;
      text-align: left;
      font-family: monospace;
      font-size: 15px;
      line-height: 15px;
      overflow: visible;
      color: black;
    }
    foreignObject.text pre {
      opacity: 0.7;
    }
  </style>

  <defs>
    <marker id="arrow" viewBox="0 0 18 10" refY="5" refX="10" orient="auto" markerWidth="5" markerHeight="9">
      <path d="M 5,5 L 0,0 L 18,5 L 0,10 L 5,5 z" fill="#800" />
    </marker>
  </defs>

  <rect x="1" y="1" rx="6" ry="6" width="698" height="468" fill="#eee" stroke-width="2" stroke="#ccc" stroke-dasharray="8" />
  <rect x="1" y="1" rx="6" ry="6" width="698" height="12" fill="#ccc" stroke-width="2" stroke="#ccc" />
  <rect x="1" y="7" width="698" height="6" fill="#ccc" stroke-width="2" stroke="#ccc" />

  <foreignObject class="text" width="1960" height="15" transform="translate(10, 6) scale(0.2)">
    <pre xmlns="http://www.w3.org/1999/xhtml"><code class="scala">@multitier trait TaskDistributionSystem extends CheckpointResponder with KvStateRegistryListener with PartitionProducerStateChecker with ResultPartitionConsumableNotifier with TaskManagerGateway with TaskManagerActions</code></pre>
  </foreignObject>

  <g id="module-0" transform="translate(8, 22)">
    <rect rx="4" ry="4" width="165" height="175" fill="#ccc" />
    <rect rx="4" ry="4" x="6" y="12" width="153" height="5" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="20" width="153" height="9" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="33" width="153" height="4" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="40" width="153" height="8" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="52" width="153" height="8" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="63" width="153" height="21" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="88" width="153" height="8" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="99" width="153" height="70" fill="#ddf" stroke="#aaf" stroke-width="3" />

    <foreignObject class="text" width="770" height="825" transform="translate(4, 4) scale(0.2)">
      <pre xmlns="http://www.w3.org/1999/xhtml"><code class="scala">@multitier trait TaskManagerActions {
  @peer type TaskManager &lt;: { type Tie &lt;: Single[TaskManager] }
 
  def notifyFinalState(executionAttemptID: ExecutionAttemptID) =
      on[TaskManager] {
    on[TaskManager].run.capture(executionAttemptID) {
      unregisterTaskAndNotifyFinalState(executionAttemptID)
    }
  }
 
  def notifyFatalError(message: String, cause: Throwable) = on[TaskManager] {
    on[TaskManager].run.capture(message, cause) {
      killTaskManagerFatal(message, cause)
    }
  }
 
  def failTask(executionAttemptID: ExecutionAttemptID,
      cause: Throwable) = on[TaskManager] {
    on[TaskManager].run.capture(executionAttemptID, cause) {
      val task = runningTasks.get(executionAttemptID)
      if (task != null) {
        task.failExternally(cause)
      } else {
        log.debug(s"Cannot find task to fail for execution $executionAttemptID)")
      }
    }
  }
 
  def updateTaskExecutionState(
      taskExecutionState: TaskExecutionState) = on[TaskManager] {
    on[TaskManager].run.capture(taskExecutionState) {
      currentJobManager foreach { jobManager =>
        val futureResponse = (jobManager ?
          decorateMessage(UpdateTaskExecutionState(taskExecutionState)))(
          askTimeout)
        futureResponse.mapTo[Boolean].onComplete {
          case scala.util.Success(result) =>
            if (!result) {
            self ! decorateMessage(
              FailTask(
                taskExecutionState.getID,
                new Exception("Task has been cancelled on the JobManager."))
              )
            }
          case scala.util.Failure(t) =>
            self ! decorateMessage(FailTask(
              taskExecutionState.getID,
              new Exception("Failed to send ExecutionStateChange notification " +
                "to JobManager", t))
          )
        }(context.dispatcher)
      }
    }
  }
}</code></pre>
    </foreignObject>

    <path d="M 8,12 q 10,7 0,14" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,33 q 10,7 0,14" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,52 q 10,14 0,28" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,88 q 10,38 0,76" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
  </g>

  <g id="module-1" transform="translate(8, 220)">
    <rect rx="4" ry="4" width="165" height="185" fill="#ccc" />
    <rect rx="4" ry="4" x="6" y="16" width="153" height="8" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="27" width="153" height="75" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="105" width="153" height="6" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="114" width="153" height="65" fill="#fdd" stroke="#faa" stroke-width="3" />

    <foreignObject class="text" width="770" height="870" transform="translate(4, 4) scale(0.2)">
      <pre xmlns="http://www.w3.org/1999/xhtml"><code class="scala">@multitier trait CheckpointResponder {
  @peer type JobManager &lt;: { type Tie &lt;: Multiple[TaskManager] }
  @peer type TaskManager &lt;: { type Tie &lt;: Single[JobManager] }
 
  def acknowledgeCheckpoint(jobID: JobID, executionAttemptID: ExecutionAttemptID,
      checkpointId: Long, checkpointMetrics: CheckpointMetrics,
      checkpointStateHandles: SubtaskState) = on[TaskManager] {
    on[JobManager].run.capture(
        jobID, executionAttemptID, checkpointId,
        checkpointMetrics, checkpointStateHandles) {
      currentJobs.get(jobID) match {
        case Some((graph, _)) =>
          val checkpointCoordinator = graph.getCheckpointCoordinator()
          if (checkpointCoordinator != null)
            future {
              try if (!checkpointCoordinator.receiveAcknowledgeMessage(
                        AcknowledgeCheckpoint(jobID, executionAttemptID,
                          checkpointId,checkpointMetrics, checkpointStateHandles)))
                  log.info("Received message for non-existing checkpoint " +
                    checkpointId)
              catch {
                case t: Throwable => log.error("Error in CheckpointCoordinator " +
                  "while processing acknowledge message", t)
              }
            }(context.dispatcher)
          else log.error(
            s"Received AcknowledgeCheckpoint message for job $jobID with no " +
            "CheckpointCoordinator")
        case None =>
          log.error(s"Received AcknowledgeCheckpoint for unavailable job $jobID")
      }
    }
  }
 
  def declineCheckpoint(jobID: JobID, executionAttemptID: ExecutionAttemptID,
      checkpointId: Long, reason: Throwable) = on[TaskManager] {
    on[JobManager].run.capture(
        jobID, executionAttemptID, checkpointId, reason) {
      currentJobs.get(jobID) match {
        case Some((graph, _)) =>
          val checkpointCoordinator = graph.getCheckpointCoordinator()
          if (checkpointCoordinator != null)
            future {
              try checkpointCoordinator.receiveDeclineMessage(DeclineCheckpoint(
                    jobID, executionAttemptID, checkpointId, reason))
              catch {
                case t: Throwable => log.error("Error in CheckpointCoordinator " +
                  "while processing decline message", t)
              }
            }(context.dispatcher)
          else log.error("Received DeclineCheckpoint message " +
            s"for job $jobID with no CheckpointCoordinator")
        case None =>
          log.error(s"Received DeclineCheckpoint for unavailable job $jobID")
      }
    }
  }
}</code></pre>
    </foreignObject>

    <path d="M 8,16 q 10,41 0,82" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,105 q 10,35 0,70" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
  </g>

  <g id="module-2" transform="translate(182, 22)">
    <rect rx="4" ry="4" width="165" height="440" fill="#ccc" />
    <rect rx="4" ry="4" x="6" y="16" width="153" height="5" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="24" width="153" height="30" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="58" width="153" height="5" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="66" width="153" height="15" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="85" width="153" height="3" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="90" width="153" height="3" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="95" width="153" height="3" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="104" width="153" height="5" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="111" width="153" height="3" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="116" width="153" height="4" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="124" width="153" height="5" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="131" width="153" height="39" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="173" width="153" height="4" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="181" width="153" height="5" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="188" width="153" height="25" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="216" width="153" height="4" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="224" width="153" height="10" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="237" width="153" height="3" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="243" width="153" height="4" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="251" width="153" height="5" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="259" width="153" height="26" fill="#ddf" stroke="#aaf" stroke-width="3" />

    <rect rx="4" ry="4" x="6" y="289" width="153" height="8" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="300" width="153" height="36" fill="#ddf" stroke="#aaf" stroke-width="3" />

    <rect rx="4" ry="4" x="6" y="340" width="153" height="8" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="351" width="153" height="39" fill="#ddf" stroke="#aaf" stroke-width="3" />

    <rect rx="4" ry="4" x="6" y="394" width="153" height="5" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="402" width="153" height="20" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="425" width="153" height="6" fill="#fdd" stroke="#faa" stroke-width="3" />

    <foreignObject class="text" width="770" height="2150" transform="translate(4, 4) scale(0.2)">
      <pre xmlns="http://www.w3.org/1999/xhtml"><code class="scala">@multitier trait TaskManagerGateway {
  @peer type JobManager &lt;: { type Tie &lt;: Multiple[TaskManager] }
  @peer type TaskManager &lt;: { type Tie &lt;: Single[JobManager] }
 
  def disconnectFromJobManager(instanceId: InstanceID, cause: Exception,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(instanceId, cause) {
      if (instanceId.equals(instanceID)) {
        handleJobManagerDisconnect(s"JobManager requested disconnect: " +
          cause.getMessage())
        triggerTaskManagerRegistration()
      } else {
        log.debug(s"Received disconnect message for wrong instance id " +
          instanceId)
      }
    }
  }
 
  def stopCluster(applicationStatus: ApplicationStatus, message: String,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(applicationStatus, message) {
      log.info(s"Stopping TaskManager with final application status " +
        s"$applicationStatus and diagnostics: $message")
      shutdown()
    }
  }
 
  def requestStackTrace(mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(tdd) {
      sendStackTrace()
    }.asLocal.map(_.left.get)
  }
 
  def submitTask(tdd: TaskDeploymentDescriptor,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(tdd) {
      submitTask(tdd)
    }.asLocal.map(_.left.get)
  }
 
  def stopTask(executionAttemptID: ExecutionAttemptID,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(executionAttemptID) {
      val task = runningTasks.get(executionAttemptID)
      if (task != null) {
        try {
          task.stopExecution()
          Left(Acknowledge.get())
        } catch {
          case t: Throwable =>
            Right(Status.Failure(t))
        }
      } else {
        log.debug(s"Cannot find task to stop for execution $executionAttemptID)")
        Left(Acknowledge.get())
      }
    }.asLocal.map(_.left.get)
  }
 
  def cancelTask(executionAttemptID: ExecutionAttemptID,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(executionAttemptID) {
      val task = runningTasks.get(executionAttemptID)
      if (task != null) {
        task.cancelExecution()
        Acknowledge.get()
      } else {
        log.debug(s"Cannot find task to cancel for execution $executionAttemptID")
        Acknowledge.get()
      }
    }.asLocal
  }
 
  def updatePartitions(
      executionAttemptID: ExecutionAttemptID,
      partitionInfos: java.lang.Iterable[PartitionInfo],
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(executionAttemptID, partitionInfos) {
      updateTaskInputPartitions(executionAttemptID, partitionInfos)
    }.asLocal.map(_.left.get)
  }
 
  def failPartition(executionAttemptID: ExecutionAttemptID,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(executionAttemptID) {
      log.info(s"Discarding the results produced by task execution $executionID")
      try {
        network.getResultPartitionManager.releasePartitionsProducedBy(executionID)
      } catch {
        case t: Throwable => killTaskManagerFatal(
          "Fatal leak: Unable to release intermediate result partition data", t)
      }
    }
  }
 
  def notifyCheckpointComplete(executionAttemptID: ExecutionAttemptID,
      jobId: JobID, checkpointId: Long, timestamp: Long,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(executionAttemptID, jobId, checkpointId, timestamp) {
      log.debug(s"Receiver ConfirmCheckpoint $checkpointId@$timestamp " +
        s"for $executionAttemptID.")
 
      val task = runningTasks.get(executionAttemptID)
      if (task != null) {
        task.notifyCheckpointComplete(checkpointId)
      } else {
        log.debug(s"TaskManager received a checkpoint confirmation " +
          s"for unknown task $taskExecutionId.")
      }
    }
  }
 
  def triggerCheckpoint(executionAttemptID: ExecutionAttemptID, jobId: JobID,
      checkpointId: Long, timestamp: Long, checkpointOptions: CheckpointOptions,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(executionAttemptID, jobId, checkpointId, timestamp,
        checkpointOptions) {
      log.debug(s"Receiver TriggerCheckpoint $checkpointId@$timestamp " +
        s"for $executionAttemptID.")
 
      val task = runningTasks.get(executionAttemptID)
      if (task != null) {
        task.triggerCheckpointBarrier(checkpointId, timestamp, checkpointOptions)
      } else {
        log.debug(s"TaskManager received a checkpoint request " +
          s"for unknown task $executionAttemptID.")
      }
    }
  }
 
  def requestTaskManagerLog(logTypeRequest: LogTypeRequest,
      mgr: Remote[TaskManager]) = on[JobManager] {
    on(mgr).run.capture(logTypeRequest) {
      blobService match {
        case Some(_) =>
          handleRequestTaskManagerLog(logTypeRequest, currentJobManager.get)
        case None =>
          Right(akka.actor.Status.Failure(new IOException(
            "BlobService not available. Cannot upload TaskManager logs.")))
      }
    }.asLocal.map(_.left.get)
  }
}</code></pre>
    </foreignObject>

    <path d="M 8,16 q 10,17 0,34" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,58 q 10,10 0,20" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,85 q 10,6 0,12" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,104 q 10,7 0,14" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,124 q 10,25 0,50" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,182 q 10,17 0,34" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,224 q 10,10 0,20" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,252 q 10,15 0,30" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,290 q 10,21 0,42" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,340 q 10,23 0,46" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,394 q 10,17 0,34" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
  </g>

  <g id="module-3" transform="translate(354, 22)">
    <rect rx="4" ry="4" width="165" height="150" fill="#ccc" />
    <rect rx="4" ry="4" x="6" y="16" width="153" height="9" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="28" width="153" height="56" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="88" width="153" height="9" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="100" width="153" height="44" fill="#fdd" stroke="#faa" stroke-width="3" />

    <foreignObject class="text" width="770" height="710" transform="translate(4, 4) scale(0.2)">
      <pre xmlns="http://www.w3.org/1999/xhtml"><code class="scala">@multitier trait KvStateRegistryListener {
  @peer type JobManager &lt;: { type Tie &lt;: Multiple[TaskManager] }
  @peer type TaskManager &lt;: { type Tie &lt;: Single[JobManager] }
 
  def notifyKvStateRegistered(jobId: JobID, jobVertexId: JobVertexID,
      keyGroupRange: KeyGroupRange, registrationName: String,
      kvStateId: KvStateID) = on[TaskManager] {
    on[JobManager].run.capture(
        jobId, jobVertexId, keyGroupRange, registrationName,
        kvStateId, kvStateServerAddress) {
      currentJobs.get(jobId) match {
        case Some((graph, _)) =>
          try {
            log.debug(s"Key value state registered for job $jobId " +
              s"under name $registrationName.")
            graph.getKvStateLocationRegistry.notifyKvStateRegistered(
              jobVertexId, keyGroupRange, registrationName,
              kvStateId, kvStateServerAddress)
          } catch {
            case t: Throwable => log.error(
              "Failed to notify KvStateRegistry about registration.")
          }
        case None =>
          log.error("Received state registration for unavailable job.")
      }
    }
  }
 
  def notifyKvStateUnregistered(jobId: JobID, jobVertexId: JobVertexID,
      keyGroupRange: KeyGroupRange,
      registrationName: String) = on[TaskManager] {
    on[JobManager].run.capture(
        jobId, jobVertexId, keyGroupRange, registrationName) {
      currentJobs.get(jobId) match {
        case Some((graph, _)) =>
          try graph.getKvStateLocationRegistry.notifyKvStateUnregistered(
                jobVertexId, keyGroupRange, registrationName)
          catch {
            case t: Throwable => log.error(
              s"Failed to notify KvStateRegistry about registration.")
          }
        case None =>
          log.error("Received state unregistration for unavailable job.")
      }
    }
  }
}</code></pre>
    </foreignObject>

    <path d="M 8,16 q 10,32 0,64" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
    <path d="M 8,88 q 10,26 0,52" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
  </g>

  <g id="module-4" transform="translate(354, 220)">
    <rect rx="4" ry="4" width="165" height="140" fill="#ccc" />
    <rect rx="4" ry="4" x="6" y="16" width="153" height="9" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="28" width="153" height="95" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="126" width="153" height="8" fill="#ddf" stroke="#aaf" stroke-width="3" />

    <foreignObject class="text" width="770" height="650" transform="translate(4, 4) scale(0.2)">
      <pre xmlns="http://www.w3.org/1999/xhtml"><code class="scala">@multitier trait PartitionProducerStateChecker {
  @peer type JobManager &lt;: { type Tie &lt;: Multiple[TaskManager] }
  @peer type TaskManager &lt;: { type Tie &lt;: Single[JobManager] }
 
  def requestPartitionProducerState(jobId: JobID,
      intermediateDataSetId: IntermediateDataSetID,
      resultPartitionId: ResultPartitionID) = on[TaskManager] { new FlinkFuture(
    on[JobManager].run.capture(
        jobId, intermediateDataSetId, resultPartitionId) {
      currentJobs.get(jobId) match {
        case Some((executionGraph, _)) =>
          try {
            val execution = executionGraph.getRegisteredExecutions
              .get(resultPartitionId.getProducerId)
            if (execution != null)
              Left(execution.getState)
            else {
              val intermediateResult = executionGraph
                .getAllIntermediateResults.get(intermediateDataSetId)
              if (intermediateResult != null) {
                val execution = intermediateResult
                  .getPartitionById(resultPartitionId.getPartitionId)
                  .getProducer.getCurrentExecutionAttempt
                if (execution.getAttemptId() == resultPartitionId.getProducerId())
                  Left(execution.getState)
                else Right(Status.Failure(new PartitionProducerDisposedException(
                  resultPartitionId)))
              }
              else Status.Failure(new IllegalArgumentException(
                s"Intermediate data set with ID $intermediateDataSetId not found."))
            }
          } catch {
            case e: Exception => Right(
              Status.Failure(new RuntimeException("Failed to look up " +
                "execution state of producer with ID " +
                s"${resultPartitionId.getProducerId}.", e)))
          }
        case None => Right(Status.Failure(new IllegalArgumentException(
          s"Job with ID $jobId not found.")))
      }
    }.asLocal.mapTo[ExecutionState])
  }
}</code></pre>
    </foreignObject>

    <path d="M 8,16 q 10,57 0,114" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
  </g>

  <g id="module-5" transform="translate(526, 22)">
    <rect rx="4" ry="4" width="165" height="100" fill="#ccc" />
    <rect rx="4" ry="4" x="6" y="16" width="153" height="5" fill="#ddf" stroke="#aaf" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="24" width="153" height="48" fill="#fdd" stroke="#faa" stroke-width="3" />
    <rect rx="4" ry="4" x="6" y="75" width="153" height="20" fill="#ddf" stroke="#aaf" stroke-width="3" />

    <foreignObject class="text" width="770" height="450" transform="translate(4, 4) scale(0.2)">
      <pre xmlns="http://www.w3.org/1999/xhtml"><code class="scala">@multitier trait ResultPartitionConsumableNotifier {
  @peer type JobManager &lt;: { type Tie &lt;: Multiple[TaskManager] }
  @peer type TaskManager &lt;: { type Tie &lt;: Single[JobManager] }
 
  def notifyPartitionConsumable(jobId: JobID, partitionId: ResultPartitionID,
      taskActions: TaskActions) = on[TaskManager] {
    on[JobManager].run.capture(jobId, partitionId) {
      currentJobs.get(jobId) match {
        case Some((executionGraph, _)) =>
          try {
            executionGraph.scheduleOrUpdateConsumers(partitionId)
            Acknowledge.get()
          } catch {
            case e: Exception => Failure(
              new Exception("Could not schedule or update consumers.", e))
          }
        case None =>
          log.error(s"Cannot find execution graph for job ID $jobId " +
            "to schedule or update consumers.")
          Failure(new IllegalStateException("Cannot find execution graph " +
            s"for job ID $jobId to schedule or update consumers."))
      }
    }.asLocal.failed foreach { failure =>
      LOG.error("Could not schedule or update consumers at the JobManager.", failure)
      taskActions.failExternally(new RuntimeException(
        "Could not notify JobManager to schedule or update consumers",
        failure))
    }
  }
}</code></pre>
    </foreignObject>

    <path d="M 8,16 q 10,37 0,74" stroke="#800" stroke-width="2" fill="none" marker-end="url(#arrow)" />
  </g>
</svg>
